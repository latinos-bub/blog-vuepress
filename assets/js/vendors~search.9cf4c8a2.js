(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{291:function(e,t,s){"use strict";s.r(t),t.default=[{title:"上传视频",path:"/posts/%E4%B8%8A%E4%BC%A0%E8%A7%86%E9%A2%91.html",strippedContent:' # markdown 如何上传音视频    ```html  \x3c!--上传音频如下--\x3e  <audio id="audio" controls="" preload="none">  <source id="mp3" src="/blog-vuepress/commons/忧伤还是快乐-July.mp3">  </audio>    \x3c!--上传视频--\x3e  <video id="video" controls="" preload="none" poster="/blog-vuepress/commons/15.jpg">  <source id="mp4" src="/blog-vuepress/commons/1.mp4" type="video/mp4">  </video>    ```        <audio id="audio" controls="" preload="none" style="border: 1px #59c63573 solid; margin-left: 200px; margin-bottom: 20px;     margin-top: 20px;     background: cyan; border-radius: 35%;">  <source id="mp3" src="/blog-vuepress/commons/忧伤还是快乐-July.mp3">  </audio>            <video id="video" controls="" preload="none" poster="/blog-vuepress/commons/15.jpg" style="border: 2px #10ff00 solid;">  <source id="mp4" src="/blog-vuepress/commons/1.mp4" type="video/mp4">  </video>    <div style="width:100%;height:0px;position:relative;padding-bottom:56.250%;"><iframe src="https://streamable.com/s/58743/wcgvid" frameborder="0" width="100%" height="100%" allowfullscreen style="width:100%;height:100%;position:absolute;left:0px;top:0px;overflow:hidden;"></iframe></div>  <div style="width:100%;height:0px;position:relative;padding-bottom:56.250%;"><iframe src="https://streamable.com/s/b5669/hfmwv" frameborder="0" width="100%" height="100%" allowfullscreen style="width:100%;height:100%;position:absolute;left:0px;top:0px;overflow:hidden;"></iframe></div>  <div style="width:100%;height:0px;position:relative;padding-bottom:56.250%;"><iframe src="https://streamable.com/s/2rmg8/lhlzaj" frameborder="0" width="100%" height="100%" allowfullscreen style="width:100%;height:100%;position:absolute;left:0px;top:0px;overflow:hidden;"></iframe></div>  <div style="width:100%;height:0px;position:relative;padding-bottom:56.250%;"><iframe src="https://streamable.com/s/4csf1/xjejxe" frameborder="0" width="100%" height="100%" allowfullscreen style="width:100%;height:100%;position:absolute;left:0px;top:0px;overflow:hidden;"></iframe></div>  <div style="width:100%;height:0px;position:relative;padding-bottom:56.250%;"><iframe src="https://streamable.com/s/i9ndt/ofkxmf" frameborder="0" width="100%" height="100%" allowfullscreen style="width:100%;height:100%;position:absolute;left:0px;top:0px;overflow:hidden;"></iframe></div>  <div style="width:100%;height:0px;position:relative;padding-bottom:56.250%;"><iframe src="https://streamable.com/s/ibw58/agdzyi" frameborder="0" width="100%" height="100%" allowfullscreen style="width:100%;height:100%;position:absolute;left:0px;top:0px;overflow:hidden;"></iframe></div>   '},{title:"实用工具",path:"/posts/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7.html",strippedContent:' \x3c!-- more--\x3e    # 阅后即焚的文件传送    https://send.firefox.com/    举个例子，如果你想给别人传送文件，但是又不想给对方知道你的私人信息（如邮箱、微信、qq等），那Firefox Send就能帮你解决问题    <img src="/blog-vuepress/images/20191126/1.png" style="align: center; width: 50%; height: 50%; margin-left: 25%;"/>    你把文件上传到网站里，不登录的情况下可上传1G文件，登录后，可上传最大2.5G文件。而且，你可以设置下载次数和截止日期，一旦达到下载数量或截止日期，这份文件就不能被下载啦。    <img src="/blog-vuepress/images/20191126/2.png" style="align: center; width: 50%; height: 50%; margin-left: 25%;"/>    甚至于可以给文件加密，然后把链接复制给需要的人，别人就能下载你想要传输的文件，真正达到“阅后即焚”的效果！需要的朋友赶紧试试！    <img src="/blog-vuepress/images/20191126/3.png" style="align: center; width: 50%; height: 50%; margin-left: 25%;"/>    # 抠图神器 -- remove.bg    https://www.remove.bg/    废话不多说，直接介绍功能，remove.bg的最重要的功能是，消除背景，直白点说就是抠图，给你看看效果    <img src="/blog-vuepress/images/20191126/4.png" style="align: center; width: 50%; height: 50%; margin-left: 25%;"/>    它可以保留前面的人物，把人物背景去掉，这样你就能把人物抠出来，放到其他背景里面，就像这样——    <img src="/blog-vuepress/images/20191126/5.png" style="align: center; width: 50%; height: 50%; margin-left: 25%;"/>    怎么样，是不是超赞！这个功能的强大在于，以后你要做PPT，就可以用这种办法把你需要的人物抠出来，比如抠个老板的表情包🤣    <img src="/blog-vuepress/images/20191126/6.png" style="align: center; width: 50%; height: 50%; margin-left: 25%;"/>    # 支持中文搜索的英文免费图库 -- Unsplash    https://unsplash.com/    讲真，这年头，我已经不敢随便用图片了，毕竟一张图侵权，可能卖了我都不够赔😝    <img src="/blog-vuepress/images/20191126/7.png" style="align: center; width: 50%; height: 50%; margin-left: 25%;"/>    所以Unsplash就是我的超大福音！这里的图不用付费，高清，而且能商用，关键是，它虽然是个英文网站，但是你可以用中文搜索！！我亲自试了一下，比如搜“风景”——    <img src="/blog-vuepress/images/20191126/8.png" style="align: center; width: 50%; height: 50%; margin-left: 25%;"/>    # 在线、移动、远程办公 -- 石墨文档    https://shimo.im/welcome    大家可能都会遇到一种情况，你需要给同事共享文档，但是发完文档之后突然发现有个地方需要更新，于是你又得重发一次......    <img src="/blog-vuepress/images/20191126/9.png" style="align: center; width: 50%; height: 50%; margin-left: 25%;"/>    石墨文档就可以很好解决这个问题，它支持Word、PPT、Excel的多人在线编辑，你写完一个文件之后，可以点击【协作】按钮，邀请项目相关人加入协作，这样以后你们的文件就是实时更新。    <img src="/blog-vuepress/images/20191126/10.png" style="align: center; width: 50%; height: 50%; margin-left: 25%;"/>    当然，这还不是我爱它的最重要原因，最重要的是，就算我忘带U盘也不怕了！！因为它支持在线存档，不用U盘也能随时编辑，手机电脑都能用！    # GIF录制工具 -- GifCam    https://gifcam.en.softonic.com/    顾名思义，这个软件就是拿来录制GIF的。点击开始，就能开始录制，录制完重新编辑一下就能导出GIF啦    <img src="/blog-vuepress/images/20191126/11.png" style="align: center; width: 50%; height: 50%; margin-left: 25%;"/>    # Youtube视频下载 -- Y2mate    https://www.y2mate.info/cn/    这个可能只有部分朋友用的上，这个网站可以用来下载Youtube上你喜欢的视频，非常方便，复制链接就能直接下载。    <img src="/blog-vuepress/images/20191126/12.png" style="align: center; width: 50%; height: 50%; margin-left: 25%;"/>    而且视频标题会自动作为文件名，真的很方便。    # 百度云盘下载加速器 -- Bd WP    https://www.baiduwp.com/    你有过下载百度云盘的文件，但是下载速度慢到你想砸电脑的体验吗？我经常有......    而且充了会员也没用，百度云盘真的，太太太太太太太慢了。这个下载加速器，就是为百度云盘而设的，有了它，速度至少快一倍。    实测，下载速度最少1-2MB/s，相信你会爱上这个工具的    <img src="/blog-vuepress/images/20191126/13.png" style="align: center; width: 50%; height: 50%; margin-left: 25%;"/>    # 流程图制作神器 -- ProcessOn    https://www.processon.com/    有时候，你可能需要做一些流程图去提升一下你的PPT或者报告的逼格，这时候，ProcessOn就是一个超级好用的神器。    <img src="/blog-vuepress/images/20191126/14.png" style="align: center; width: 50%; height: 50%; margin-left: 25%;"/>    你可以自己打开一个新的页面，选择你想要制作的图，比如流程图、思维导图、原型图、组织结构图等。    <img src="/blog-vuepress/images/20191126/15.png" style="align: center; width: 50%; height: 50%; margin-left: 25%;"/>    这是流程图的页面，点击拖动左方的图形到右方空白处，就能出现下面这幅场景。接着，就可以根据你的需要制作你想要的图啦。    <img src="/blog-vuepress/images/20191126/16.png" style="align: center; width: 50%; height: 50%; margin-left: 25%;"/>    如果你没什么好的思路，这里也有别人家的参考案例，你可以套用别人的模板去做你需要的图。    <img src="/blog-vuepress/images/20191126/17.png" style="align: center; width: 50%; height: 50%; margin-left: 25%;"/>    总而言之，需要图者都清楚，这是一个超级棒的工具！    # 格式转换 -- SmallPdf    https://smallpdf.com/cn    这个就不用我多说啦，格式转换，太多人需要了额，但我要强调一点是，这个可以线上进行，不用下载客户端！！真的很方便，亲测有效。    <img src="/blog-vuepress/images/20191126/18.png" style="align: center; width: 50%; height: 50%; margin-left: 25%;"/>    # 思维导图 -- 百度脑图    https://naotu.baidu.com    我是一个很喜欢用思维导图的人，因为真的很方便，尤其是整理思路的时候，写读书笔记的时候。    最初我用的不是百度脑图，而是其他软件，但是我发现这些软件有个问题，就是没办法实现同步，除非交钱（没办法，穷人就是这么可怜）    于是朋友推荐给我这个百度脑图，我一瞧，诶这功能还可以诶，而且，只要有浏览器的地方就能用，在实现同步方面真的不要太爽！    <img src="/blog-vuepress/images/20191126/19.png" style="align: center; width: 50%; height: 50%; margin-left: 25%;"/>    # 声明    本文内容全部来源于    [互联网]: https://mp.weixin.qq.com/s/t0HqSHozjCce6F8UwsS9vQ    在此特别致谢该公众号，欢迎大家扫码关注    <img src="/blog-vuepress/images/20191126/20.png" style="align: center; width: 50%; height: 50%; margin-left: 25%;"/>    '},{title:"20191102图片墙",path:"/posts/20191102%E5%9B%BE%E7%89%87%E5%A2%99.html",strippedContent:' <img src="/blog-vuepress/photos/20191102/1.jpg" width="100%" height="100%" alt="2019110201" align="center">    <img src="/blog-vuepress/photos/20191102/2.jpg" width="100%" height="100%" alt="2019110202" align="center">    <img src="/blog-vuepress/photos/20191102/3.jpg" width="100%" height="100%" alt="2019110203" align="center">    <img src="/blog-vuepress/photos/20191102/4.jpg" width="100%" height="100%" alt="2019110204" align="center">    <img src="/blog-vuepress/photos/20191102/5.jpg" width="100%" height="100%" alt="2019110205" align="center">    <img src="/blog-vuepress/photos/20191102/6.jpg" width="100%" height="100%" alt="2019110206" align="center">    <img src="/blog-vuepress/photos/20191102/7.jpg" width="100%" height="100%" alt="2019110207" align="center">    '},{title:"hexo 设置favicon",path:"/posts/hexo-%E8%AE%BE%E7%BD%AEfavicon.html",strippedContent:" ### 下载favicon图片    * [阿里巴巴矢量图标库](https://www.iconfont.cn/)  * [easyicon](https://www.easyicon.net/)    \x3c!--more--\x3e    ### 设置favicon    > 将下载下来的文件放到根目录下面，然后重新命名为`favicon.png`  >  > 编辑 `_config.yml` 文件，添加如下内容即可:  >  > ```bash  > # set favicon  > favicon: /favicon.png  > ```    ### 生成、部署    ```bash  hexo generate  hexo deploy  ```    "},{title:"20191112图片墙",path:"/posts/20191112%E5%9B%BE%E7%89%87%E5%A2%99.html",strippedContent:' <img src="/blog-vuepress/photos/20191112/0.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/1.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/2.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/3.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/4.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/5.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/6.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/7.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/8.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/9.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/10.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/11.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/12.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/13.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/14.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/15.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/16.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/17.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/18.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/19.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/20.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/21.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/22.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/23.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/25.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/26.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/27.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/28.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/29.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/30.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/31.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/32.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/33.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/34.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/35.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/36.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/37.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/38.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/39.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/40.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/41.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/42.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/43.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/44.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/45.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/46.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/47.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/48.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/49.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/50.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/51.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/52.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/53.jpg" width="25%">    <img src="/blog-vuepress/photos/20191112/54.jpg" width="25%">    '},{title:"Java中使用HSSFWorkbook生成excel",path:"/posts/Java%E4%B8%AD%E4%BD%BF%E7%94%A8HSSFWorkbook%E7%94%9F%E6%88%90excel.html",strippedContent:' <img src="/blog-vuepress/images/20191114/1.jpg" style="align: center; width: 50%; height: 50%; margin-left: 25%;"/>    # HSSFWorkbook 介绍  ---  开发中经常会遇到 Excel 的处理，在 Java 中，操作 excel 目前有两个主流框架，分别是：  * apache 的 poi    > Apache POI [1]  是用Java编写的免费开源的跨平台的 Java API，Apache POI提供API给Java程式对Microsoft Office格式档案读和写的功能。POI为“Poor Obfuscation Implementation”的首字母缩写，意为“简洁版的模糊实现”。    * Java Excel    > Java Excel是一开放源码项目，通过它Java开发人员可以读取Excel文件的内容、创建新的Excel文件、更新已经存在的Excel文件。jxl 由于其小巧 易用的特点, 逐渐已经取代了 POI-excel的地位, 成为了越来越多的java开发人员生成excel文件的首选    这里提一下：HSSFWorkbook:是操作Excel2003以前（包括2003）的版本，扩展名是.xls；XSSFWorkbook:是操作Excel2007的版本，扩展名是.xlsx。对于不同版本的EXCEL文档要使用不同的工具类，如果使用错了，会提示如下错误信息：org.apache.poi.openxml4j.exceptions.InvalidOperationException，org.apache.poi.poifs.filesystem.OfficeXmlFileException    <img src="/blog-vuepress/images/20191114/2.jpg" style="align: center; width: 50%; height: 50%; margin-left: 25%;"/>    # HSSFWorkbook 的使用  ---    ```java  package com.knowledge.point;    import org.apache.poi.hssf.usermodel.*;  import org.apache.poi.ss.usermodel.Font;    import java.io.*;  import java.util.ArrayList;  import java.util.HashMap;  import java.util.List;  import java.util.Map;    /**   * @author: latinos-bub   * @date: 2019/11/12 17:32   * @description: 测试生成 excel   * @className: com.knowledge.point.TestGenExcel   */  public class TestGenExcel {        public static void main(String[] args) throws Exception{            // 创建一个 excel 工作簿          HSSFWorkbook workbook = new HSSFWorkbook();            // 创建一个 excel 里面的 sheet 表格，并设置 sheet 名字          HSSFSheet sheet = workbook.createSheet("测试生成 excel 表格是否乱码");            // -------------------------------设置 工作簿的 样式 start--------------------------//          HSSFCellStyle titleStyle  = workbook.createCellStyle(); // 创建标题样式          titleStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);    // 设置标题水平居中显示          titleStyle.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER); // 设置标题垂直居中显示          HSSFFont titleFont = workbook.createFont();    // 创建标题字体          titleFont.setItalic(false);                     // 设置字体为斜体字          titleFont.setColor(Font.COLOR_RED);            // 将字体设置为“红色”          titleFont.setFontHeightInPoints((short)16);    // 将字体大小设置为18px          titleFont.setFontName("宋体");             // 将“宋体”字体应用到当前单元格上          titleFont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);    //加粗          titleStyle.setFont(titleFont); // 将 字体应用到 标题样式上            HSSFCellStyle cellStyle  = workbook.createCellStyle();  // 创建 cell 单元格样式          cellStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER); // 设置 cell 单元格水平居中显示          cellStyle.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);  // 设置 cell 单元格垂直居中显示          Font cellFont = workbook.createFont();  // 创建 单元格 字体          cellFont.setFontHeightInPoints((short)10);    // 将字体大小设置为18px          cellFont.setFontName("宋体");             // 字体应用到当前单元格上          cellStyle.setFont(cellFont); // 将 字体应用到 单元格样式上          // -------------------------------设置 工作簿的 样式 end--------------------------//                // 创建 首行(即标题 行)          HSSFRow headRow = sheet.createRow(0);          // 创建 首行(即标题 行) 的 第一个单元格          HSSFCell headCell = headRow.createCell(0);          // 设置 首行(即标题 行)的文字内容          headCell.setCellValue("更新时间");          headCell.setCellStyle(titleStyle); // 设置 首行的 第一个单元格 样式          // 创建 首行(即标题 行) 的 第二个单元格          headCell = headRow.createCell(1);          headCell.setCellValue("创建时间");          headCell.setCellStyle(titleStyle);  // 这里一定要每次实例化之后都要设置样式          headCell = headRow.createCell(2);          headCell.setCellValue("删除状态");          headCell.setCellStyle(titleStyle); // 这里一定要每次实例化之后都要设置样式          headCell = headRow.createCell(3);          headCell.setCellValue("id");          headCell.setCellStyle(titleStyle); // 这里一定要每次实例化之后都要设置样式          headCell = headRow.createCell(4);          headCell.setCellValue("书名");          headCell.setCellStyle(titleStyle); // 这里一定要每次实例化之后都要设置样式              // 获取 模拟的 List<Map<String, Object> 数据          List<Map<String, Object>> list = getList();            for (int i = 0; i < list.size(); i++){  // 外层for是每一行的设置              // 每一行(填充的内容行)时，我们都要新实例化一个 HSSRow 新行              HSSFRow contentRow = sheet.createRow(sheet.getLastRowNum() + 1);    // 调用sheet的上次最后一行索引 + 1即可              for (int j = 0; j < 5; j++){    // 内层 for 是 每行的 列数设置，因为我们的标题行有5列，所以这里设置5列                  // 每一行，我们都要在该行(即contentRow) 实例化 5 个 cell 单元格                  HSSFCell contentCell = contentRow.createCell(j);                  switch (j){ // 1，2，3，4，5个单元格分别写入自己正确的数据                      case 0: // 每一行的第一列(即第一个cell)我们都写入 update_time 对应的数据，以下依次类推                          contentCell.setCellValue(String.valueOf(list.get(i).get("update_time")));                          break;                      case 1:                          contentCell.setCellValue(String.valueOf(list.get(i).get("create_time")));                          break;                      case 2:                          contentCell.setCellValue(String.valueOf(list.get(i).get("delete_status")));                          break;                      case 3:                          contentCell.setCellValue(String.valueOf(list.get(i).get("id")));                          break;                      case 4:                          contentCell.setCellValue(String.valueOf(list.get(i).get("content")));                          break;                  }                  // 设置 内容 居中显示 样式                  contentCell.setCellStyle(cellStyle);              }          }            // 设置 列 的宽度          sheet.setColumnWidth(0, 900 * 10);          sheet.setColumnWidth(1, 900 * 10);          sheet.setColumnWidth(2, 900 * 10);          sheet.setColumnWidth(3, 900 * 10);          sheet.setColumnWidth(4, 900 * 10);              File xlsFile = new File("测试生成Excel.xls");          workbook.write(new FileOutputStream(xlsFile));          workbook.close();              // 补充：如果是 web 程序，需要页面打开一个对话框，保存文件则，需要额外添加以下代码即可          /*String fileName = "excel表";          fileName = new String(fileName.getBytes(), "ISO-8859-1");          HttpServletResponse response = this.getResponse().getHttpResponse();          response.setHeader("Content-disposition", "attachment; filename=" + fileName + ".xls");          response.setContentType("application/application/vnd.ms-excel;charset=utf-8");          ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();          // workbook 工作簿中写入数据          workbook.write(byteArrayOutputStream);          byte[] content = byteArrayOutputStream.toByteArray();          InputStream inputStream = new ByteArrayInputStream(content);          ServletOutputStream out = null;          try {              out = response.getOutputStream();              byte[] b = new byte[2048];  // 设置 缓冲区的读取字节大小              int i;              while ((i = inputStream.read(b)) > 0) {                  out.write(b, 0, i);              }              out.flush();          } catch (Exception e) {              System.out.println("生成excel表格时出错: " + e.getMessage());          } finally {              if (inputStream != null)                  inputStream.close();              if (out != null)                  out.close();          }*/      }              /**      * @Author latinos-bub      * @Description //TODO   这里我先准备一个从别的地方获取的 sql 结果集合，以备下面写入数据使用       * 这个 List 中我们就存放 12 个 Map 即可(模拟数据)      * @Date 2019/11/12 21:17      * @Param []      * @return java.util.List<java.util.Map<java.lang.String,java.lang.Object>>      **/      private static List<Map<String, Object>> getList(){            List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();          Map<String, Object> map1 = new HashMap<String, Object>();          map1.put("update_time", "1569404166000");          map1.put("create_time", "1569404122000");          map1.put("delete_status", "1");          map1.put("id", "2");          map1.put("content", "如何削铁");          list.add(map1);            Map<String, Object> map2 = new HashMap<String, Object>();          map2.put("update_time", "1509357581000");          map2.put("create_time", "1508893725000");          map2.put("delete_status", "1");          map2.put("id", "5");          map2.put("content", "莎士比亚");          list.add(map2);            Map<String, Object> map3 = new HashMap<String, Object>();          map3.put("update_time", "1510970055000");          map3.put("create_time", "1508986168000");          map3.put("delete_status", "1");          map3.put("id", "6");          map3.put("content", "亚里士多德");          list.add(map3);              Map<String, Object> map4 = new HashMap<String, Object>();          map4.put("update_time", "1510118932000");          map4.put("create_time", "1509001065000");          map4.put("delete_status", "1");          map4.put("id", "10");          map4.put("content", "亚历山大");          list.add(map4);              Map<String, Object> map5 = new HashMap<String, Object>();          map5.put("update_time", "1509002622000");          map5.put("create_time", "1509002622000");          map5.put("delete_status", "0");          map5.put("id", "11");          map5.put("content", "李白");          list.add(map5);              Map<String, Object> map6 = new HashMap<String, Object>();          map6.put("update_time", "1569376168000");          map6.put("create_time", "1569404290000");          map6.put("delete_status", "1");          map6.put("id", "12");          map6.put("content", "无用是什么");          list.add(map6);            Map<String, Object> map7 = new HashMap<String, Object>();          map7.put("update_time", "1569376160000");          map7.put("create_time", "1569404290000");          map7.put("delete_status", "0");          map7.put("id", "13");          map7.put("content", "选择吃什么饭是一件很痛苦的事");          list.add(map7);            Map<String, Object> map8 = new HashMap<String, Object>();          map8.put("update_time", "1510983431000");          map8.put("create_time", "1510983427000");          map8.put("delete_status", "1");          map8.put("id", "19");          map8.put("content", "文章test2");          list.add(map8);            Map<String, Object> map9 = new HashMap<String, Object>();          map9.put("update_time", "1569376164000");          map9.put("create_time", "1569404290000");          map9.put("delete_status", "1");          map9.put("id", "20");          map9.put("content", "就像选择在哪里睡觉一样");          list.add(map9);            Map<String, Object> map10 = new HashMap<String, Object>();          map10.put("update_time", "1569376166000");          map10.put("create_time", "1569404290000");          map10.put("delete_status", "1");          map10.put("id", "21");          map10.put("content", "effective of java");          list.add(map10);            Map<String, Object> map11 = new HashMap<String, Object>();          map11.put("update_time", "1569376172000");          map11.put("create_time", "1569404290000");          map11.put("delete_status", "1");          map11.put("id", "22");          map11.put("content", "荒岛求生");          list.add(map11);            Map<String, Object> map12 = new HashMap<String, Object>();          map12.put("update_time", "1569376170000");          map12.put("create_time", "1569404290000");          map12.put("delete_status", "0");          map12.put("id", "23");          map12.put("content", "天使永远就在身边");          list.add(map12);            return list;      }  }    ```    ------    <img src="/blog-vuepress/images/20191114/3.jpg" style="align: center; width: 50%; height: 50%; margin-left: 25%;"/>        <div style="align: middle; background-color: #67c23a; padding-left: 25%; color: white; margin-top: 20px;">《行香子·归去来兮》\t  \t-- 北宋：辛弃疾  </div>    > 归去来兮，行乐休迟。命由天、富贵何时。  > 百年光景，七十者稀。奈一番愁，一番病，一番衰。  > 名利奔驰，宠辱惊疑。旧家时、都有些儿。  > 而今老矣，识破关机。算不如闲，不如醉，不如痴。    '},{title:"hexo部署css,js等404以及上传图片",path:"/posts/hexo%E9%83%A8%E7%BD%B2css-js%E7%AD%89404%E4%BB%A5%E5%8F%8A%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87.html",strippedContent:' ### 部署到github上css等404  \x3c!--more--\x3e    这是由于你的css，js等资源请求路径不对引起的    如何解决呢？    只需要在你的 `source/` 目录下面，新建一个空文件，文件名必须为 `.nojekyll`，然后在根目录的配置文件(`_config.yml`) 中添加如下配置即可:    ```yml  # set github css&js  include:    - .nojekyll  ```    如图所示:    <img src="/blog-vuepress/images/20191114/5.png" style="align: center; width: 50%; height: 50%; margin-left: 25%;"/>    ### 如何上传图片呢    我们只需要在我们的`source`目录下，新建一个 `images` 目录，然后将所有的图片都保存在这里，之后在 `md` 文件中引用即可(例如: `/blog-vuepress/19103002.png`)      <img src="/blog-vuepress/images/20191114/6.png" style="align: center; width: 50%; height: 50%; margin-left: 25%;"/>'},{title:"vuepress博客上传图片",path:"/posts/vuepress%E5%8D%9A%E5%AE%A2%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87.html",strippedContent:' ### vuepress 博客上传图片  \x3c!-- more --\x3e    > 首先说明一点：vuepress 的博客绑定的github仓库名没有必须是 username.github.io 这种形式的强要求，千万别被误导了，因为我们都是使用github来同时搭建 hexo 博客 和 vuepress 博客的，因此不可能只有一个仓库(且还必须是 username.github.io 名称 这种错误论断的)。    > 我们 vuepress 用到的所有的图片资源我们都要放在 `blog\\docs\\.vuepress\\public`  pulibc 目录下，之后我们的所有md文件中引用都是 `/1.png` 或者 `/你的仓库名/1.png` 这种格式(后面这种格式是因为你的仓库名不是大部分人设置的 username.github.io 这种名称，随机定义的，你就这样写就行了)，但是注意一点，当你的图片路径如此写的话，在你本地是看不到的，但是没关系，当我们部署到github上时就可以看到了。    如下所示：    <img src="/blog-vuepress/images/20191114/7.png" style="align: center; width: 50%; height: 50%; margin-left: 25%;"/>    引入图片格式如下：    <img src="/blog-vuepress/images/20191114/8.png" style="align: center; width: 50%; height: 50%; margin-left: 25%;"/>    '},{title:"ssm框架-流程",path:"/posts/ssm%E6%A1%86%E6%9E%B6-%E6%B5%81%E7%A8%8B.html",strippedContent:' ### springmvc 的配置    \x3c!--more--\x3e    springmvc配置文件需要配置的内容：    ```xml  \x3c!--配置包扫描--\x3e  <context:component-scan base-package="com.latinos.*"/>    \x3c!--开启springmvc注解驱动--\x3e  <mvc:annotation-driven/>    \x3c!--配置视图解析器：是为了在url上不写 pages InternalResourceViewResolver--\x3e  <bean id="internalResourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">          \x3c!--配置前缀--\x3e          <property name="prefix" value="/pages/"/>          \x3c!--配置后缀--\x3e          <property name="suffix" value=""/>  </bean>      \x3c!--配置文件上传 CommonsMultipartResolver--\x3e  <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">          \x3c!--配置默认编码--\x3e          <property name="defaultEncoding" value="UTF-8"/>          \x3c!--配置所有文件的总上传大小--\x3e          <property name="maxUploadSize" value="10485760"/>  </bean>      \x3c!--配置定时器任务（可以暂时不写）--\x3e    ```    ### spring 的配置  ```xml  \x3c!--配置读取jdbc.properties配置文件的工具类 PropertyPlaceholderConfigurer--\x3e      <bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">          \x3c!--配置 jdbc.properties 的读取位置 如果是 资源文件，路径就是用 . 隔开的，          当处于 resouces 直接根目录下的，就是 classpath，若有子包的话，就是 classpath* --\x3e          <property name="location" value="classpath:jdbc.properties"/>      </bean>      \x3c!--配置数据源及数据库连接池 BasicDataSource--\x3e  <bean id="basicDataSource" class="org.apache.commons.dbcp.BasicDataSource">          <property name="driverClassName" value="${driverClassName}"></property>          <property name="url" value="${url}"/>          <property name="username" value="${username}"/>          <property name="password" value="${password}"/>  </bean>      \x3c!--读取书写sql语句的xml文件的位置 SqlSessionFactoryBean--\x3e  <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">          \x3c!--注入数据源--\x3e          <property name="dataSource" ref="basicDataSource"/>          \x3c!--指定xml文件的存放位置--\x3e          <property name="mapperLocations" value="classpath*:com/latin/mapper/*.xml"></property>          \x3c!--指定mybatis主配置文件--\x3e          <property name="configLocation" value="classpath:mybatis.xml"/>  </bean>      \x3c!--读取dao层接口类，将dao层与对应的xml文件关联 MapperScannerConfigurer--\x3e  <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">          \x3c!--指定dao接口类的位置--\x3e          <property name="basePackage" value="com.latin.mapper"/>  </bean>  ```    ### mybatis 的配置    ```xml  \x3c!--配置别名--\x3e    \x3c!--配置PageHelper插件--\x3e  <plugins>          <plugin interceptor="com.github.pagehelper.PageHelper">              <property name="dialect" value="mysql"/>          </plugin>  </plugins>  ```    ### web.xml 的配置    ```xml  \x3c!--配置默认访问首页--\x3e  <welcome-file-list>          <welcome-file>/pages/front/index.jsp</welcome-file>  </welcome-file-list>    \x3c!--配置处理中文乱码的过滤器类--\x3e  <filter>      <filter-name>characterEncodingFilter</filter-name>      <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>      <init-param>          <param-name>encoding</param-name>          <param-value>UTF-8</param-value>      </init-param>  </filter>  <filter-mapping>      <filter-name>characterEncodingFilter</filter-name>      <url-pattern>/*</url-pattern>  </filter-mapping>        \x3c!--配置监听器，读取applicationContext.xml文件：ContextLoaderListener--\x3e  <context-param>      <param-name>contextConfigLocation</param-name>      <param-value>classpath:applicationContext.xml</param-value>  </context-param>  <listener>      <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>  </listener>    \x3c!--配置springmvc的核心类--\x3e      <servlet>          <servlet-name>dispatcherServlet</servlet-name>          <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>          <init-param>              <param-name>contextConfigLocation</param-name>              <param-value>classpath:springmvc.xml</param-value>          </init-param>          <load-on-startup>1</load-on-startup>      </servlet>      <servlet-mapping>          <servlet-name>dispatcherServlet</servlet-name>          <url-pattern>*.do</url-pattern>      </servlet-mapping>    \x3c!--配置错误页面--\x3e      <error-page>          <error-code>404</error-code>          <location>/pages/error/404.jsp</location>      </error-page>    ```  <img src="/blog-vuepress/images/20191114/4.jpg" style="align: center; width: 50%; height: 50%; margin-left: 25%;"/>'},{title:"跨域-spring boot后端配置",path:"/posts/%E8%B7%A8%E5%9F%9F-spring-boot%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE.html",strippedContent:' ### 跨域    > 关于跨域的概念，请参看：[腾讯云的介绍](https://cloud.tencent.com/developer/article/1175899)    \x3c!--more--\x3e    ### 怎么判断是跨域    > * 是否是同一协议，比如 http、https等  > * 是否是同一ip地址  > * 是否是同一端口  >  > 只要以上三个条件中有一个不满足，既是跨域    ### 如何解决    > 常见的解决方式大概有三种：前端解决（适用于前后端分离分离项目）、后端解决、通过代理服务器解决（比如常见的nginx代理配置解决）  >  > 现在我这里只介绍通过后端的配置来解决跨域的问题，前端和nginx代理的解决方式，之后会写    ### spring boot 解决    ```java  // 我们通过实现WebMvcConfigurer接口来解决跨域  package xxxx;    import org.springframework.context.annotation.Configuration;  import org.springframework.web.servlet.config.annotation.CorsRegistry;  import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;    /**   * @description: 后端通过实现 WebMvcConfigure 接口来实现跨域   * @className: CorsConfig   */  @Configuration  public class CorsConfig implements WebMvcConfigurer {        @Override      public void addCorsMappings(CorsRegistry registry) {            registry.addMapping("/**")                  .allowedOrigins("*")                  .allowCredentials(true)                  .allowedMethods("GET", "POST", "DELETE", "PUT","PATCH")                  .maxAge(3600);      }  }  ```    '}]}}]);